stages:
  - version
  - build
  # - test  # Commented for now as requested
  - package
  - deploy

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository"
  DOCKER_TLS_CERTDIR: "/certs"

cache:
  paths:
    - .m2/repository/
    - target/

# Generate semantic version based on git tags
generate_version:
  stage: version
  image: alpine/git:latest
  script:
    - apk add --no-cache jq curl
    - |
      # Get latest version from git tags
      LATEST_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)
      if [ -z "$LATEST_TAG" ]; then
        NEW_VERSION="1.0.1"
      else
        CURRENT_VERSION=${LATEST_TAG#v}
        MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
        MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
        PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
        
        if [ $PATCH -lt 99 ]; then
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
        else
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="${MAJOR}.${NEW_MINOR}.0"
        fi
      fi
      
      echo "Previous version: ${LATEST_TAG:-none}"
      echo "New version: v${NEW_VERSION}"
      echo "VERSION=${NEW_VERSION}" > version.env
      echo "VERSION_TAG=v${NEW_VERSION}" >> version.env
  artifacts:
    reports:
      dotenv: version.env
    expire_in: 1 hour

build:
  stage: build
  image: gradle:8-jdk17-alpine
  script:
    - echo "Building user-service version ${VERSION}"
    - chmod +x gradlew
    - ./gradlew clean build -x test
    - echo "Build completed for user-service v${VERSION}"
  artifacts:
    name: "user-service-build-${VERSION}"
    when: always
    paths:
      - build/
      - build/libs/*.jar
    expire_in: 1 hour
  dependencies:
    - generate_version

package:
  stage: package
  image: docker:24
  services:
    - docker:24-dind
  variables:
    IMAGE_TAG: "${CI_REGISTRY_IMAGE}:${VERSION}"
    LATEST_TAG: "${CI_REGISTRY_IMAGE}:latest"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Building Docker image for user-service v${VERSION}"
    - docker build -t ${IMAGE_TAG} -t ${LATEST_TAG} .
    - echo "Pushing versioned image: ${IMAGE_TAG}"
    - docker push ${IMAGE_TAG}
    - echo "Pushing latest image: ${LATEST_TAG}"
    - docker push ${LATEST_TAG}
    - echo "Successfully published user-service:"
    - echo "Version: ${IMAGE_TAG}"
    - echo "Latest: ${LATEST_TAG}"
  dependencies:
    - build
    - generate_version
  only:
    - master
    - main
    - develop

tag_release:
  stage: deploy
  image: alpine/git:latest
  before_script:
    - apk add --no-cache curl
    - git config user.email "ci@gitlab.com"
    - git config user.name "GitLab CI"
    - git remote set-url origin https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
  script:
    - echo "Creating git tag: ${VERSION_TAG}"
    - git tag -a ${VERSION_TAG} -m "Release user-service ${VERSION_TAG}"
    - git push origin ${VERSION_TAG}
    - echo "Tagged release: ${VERSION_TAG}"
    - echo "Docker image: ${CI_REGISTRY_IMAGE}:${VERSION}"
  dependencies:
    - generate_version
    - package
  only:
    - master
    - main
