stages:
  - build
#  - test
  - package
  - deploy

variables:
  VERSION: "1.0.${CI_PIPELINE_ID}"
  IMAGE_TAG: "${CI_REGISTRY_IMAGE}:${VERSION}"
  LATEST_TAG: "${CI_REGISTRY_IMAGE}:latest"
  MAVEN_OPTS: "-Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository"

cache:
  paths:
    - .m2/repository/
    - target/

build:
  stage: build
  image: gradle:8-jdk17-alpine
  script:
    - echo "Building user-service version ${VERSION}"
    - chmod +x gradlew
    - ./gradlew clean build -x test
    - echo "Build completed for user-service"
  artifacts:
    name: "user-service-build-${CI_COMMIT_SHORT_SHA}"
    when: always
    paths:
      - build/
      - build/libs/*.jar
    reports:
      junit: build/test-results/test/*.xml

#test:
#  stage: test
#  image: gradle:8-jdk17-alpine
#  services:
#    - name: testcontainers/ryuk:0.5.1
#      alias: ryuk
#  variables:
#    TESTCONTAINERS_RYUK_DISABLED: "true"
#    SPRING_PROFILES_ACTIVE: "test"
#    REACTOR_DEBUG_AGENT_ENABLED: "true"
#  before_script:
#    - echo "Testing user-service reactive components..."
#    - chmod +x gradlew
#  script:
#    - echo "Running unit tests for user-service..."
#    - ./gradlew test --info --continue
#    - echo "Running integration tests..."
#    - ./gradlew integrationTest --info --continue || true
#    - echo "Generating test reports..."
#    - ./gradlew jacocoTestReport
#  artifacts:
#    name: "user-service-test-reports-${CI_COMMIT_SHORT_SHA}"
#    when: always
#    paths:
#      - build/test-results/
#      - build/reports/tests/
#      - build/reports/jacoco/
#      - build/jacoco/
#    reports:
#      junit: build/test-results/test/*.xml
#      coverage_report:
#        coverage_format: jacoco
#        path: build/reports/jacoco/test/jacocoTestReport.xml

package:
  stage: package
  image: docker:24
  services:
    - docker:24-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Building Docker image for user-service version ${VERSION}"
    - docker build -t ${IMAGE_TAG} -t ${LATEST_TAG} .
    - echo "Pushing versioned image ${IMAGE_TAG}"
    - docker push ${IMAGE_TAG}
    - echo "Pushing latest image ${LATEST_TAG}"
    - docker push ${LATEST_TAG}
    - echo "Successfully published:"
    - echo "  - ${IMAGE_TAG}"
    - echo "  - ${LATEST_TAG}"
  dependencies:
    - build
  only:
    - master
    - main
    - develop

deploy:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Deployment placeholder for user-service ${VERSION}"
    - echo "Image available at ${IMAGE_TAG}"
    - echo "Ready for Helm/ArgoCD deployment"
  only:
    - master
    - main
