stages:
  - build
  - version
  - package
  - deploy

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository"

cache:
  paths:
    - .m2/repository/
    - target/

generate_version:
  stage: version
  image: alpine/git:latest
  script:
    - apk add --no-cache jq
    - echo "Fetching git tags..."
    - git fetch --tags
    - LATEST_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1 || echo "")
    - echo "Latest tag found: ${LATEST_TAG:-none}"
    - |
      if [ -z "$LATEST_TAG" ]; then
        echo "No previous tags found, starting with v1.0.1"
        NEW_VERSION="1.0.1"
      else
        echo "Parsing version from $LATEST_TAG"
        CURRENT_VERSION=${LATEST_TAG#v}
        MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
        MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
        PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
        
        if [ $PATCH -lt 99 ]; then
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
        else
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="${MAJOR}.${NEW_MINOR}.0"
        fi
        echo "Incremented to v$NEW_VERSION"
      fi
    - echo "VERSION=${NEW_VERSION}" > version.env
    - echo "VERSION_TAG=v${NEW_VERSION}" >> version.env
    - echo "Generated version file:"
    - cat version.env
  artifacts:
    reports:
      dotenv: version.env
    expire_in: 1 hour

build:
  stage: build
  image: gradle:8-jdk17-alpine
  script:
    - echo "Building user-service version ${VERSION}"
    - chmod +x gradlew
    - ./gradlew clean build -x test
    - ls -la build/libs/
  artifacts:
    paths:
      - build/libs/*.jar
    expire_in: 1 hour
  dependencies:
    - generate_version

package:
  stage: package
  image: docker:24
  services:
    - docker:24-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Building Docker images for user-service"
    - echo "Version tag: $CI_REGISTRY_IMAGE:$VERSION"
    - echo "Latest tag: $CI_REGISTRY_IMAGE:latest"
    - docker build -t "$CI_REGISTRY_IMAGE:$VERSION" -t "$CI_REGISTRY_IMAGE:latest" .
    - docker push "$CI_REGISTRY_IMAGE:$VERSION"
    - docker push "$CI_REGISTRY_IMAGE:latest"
    - echo "Successfully pushed version $VERSION and latest"
  dependencies:
    - build
    - generate_version
  only:
    - master
    - main

tag_release:
  stage: deploy
  image: alpine/git:latest
  before_script:
    - git config user.email "ci@gitlab.com"
    - git config user.name "GitLab CI"
    - git remote set-url origin "https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
  script:
    - echo "Creating git tag: ${VERSION_TAG}"
    - git tag -a "${VERSION_TAG}" -m "Release user-service ${VERSION_TAG}"
    - git push origin "${VERSION_TAG}"
    - echo "Successfully tagged release ${VERSION_TAG}"
  dependencies:
    - generate_version
    - package
  only:
    - master
    - main
